1: Project Specification - The Library Management System API

This section establishes the project's context, defining the "what" and "why" of the application to be built. It provides the concrete requirements that will guide the development process.

1.1. Overview and Objectives

The project entails the creation of a RESTful API to manage the core functions of a small library, specifically its collection of books and the process of borrowing and returning them.

The primary objectives are:

    To demonstrate proficiency in building a well-structured ASP.NET Core Web API.

    To implement key backend patterns and principles—such as dependency injection, asynchronous programming, and centralized error handling—in a practical context.

    To produce clean, readable, and maintainable code that adheres to industry best practices and established coding conventions.   

1.2. Core Entities and Data Model

The foundation of any application is its data model. The following entities represent the core "nouns" of the library system and will be translated into C# model classes and, conceptually, database tables.  

    Book: Represents a single, physical book in the library's collection.

        Id (int): The unique identifier for the book.

        Title (string): The title of the book.

        Author (string): The author of the book.

        ISBN (string): The International Standard Book Number.

        Status (enum: Available, Borrowed): The current availability status of the book.   

        BorrowerId (nullable int): A foreign key reference to the Member who has borrowed the book. This will be null if the book is Available.

    Member: Represents a registered member of the library.

        Id (int): The unique identifier for the member.

        Name (string): The full name of the member.

    BorrowingRecord: Represents a historical transaction of a book being borrowed.

        Id (int): The unique identifier for the borrowing record.

        BookId (int): A foreign key reference to the Book that was borrowed.

        MemberId (int): A foreign key reference to the Member who borrowed the book.

        BorrowDate (DateTime): The timestamp when the book was borrowed.

        ReturnDate (nullable DateTime): The timestamp when the book was returned. This is null for currently borrowed books.

A key design decision in data modeling is managing complexity appropriately for the project's scope. Some systems differentiate between a logical Book (a title) and a physical BookItem (a specific copy with a unique barcode) to handle multiple copies and formats. For a 4-hour challenge focused on a breadth of backend concepts, this level of detail can be distracting. Therefore, a simpler model is adopted where each  

Book entity represents one physical copy.

However, to introduce a more robust design principle without excessive complexity, the BorrowingRecord entity is included. Instead of only tracking the current state on the Book entity, this creates an immutable audit trail of all borrowing transactions. This separation of concerns is a critical concept in real-world systems, as it provides a clear history for reporting and accountability. This approach strikes a balance between the simplicity needed for the challenge and the sound architectural patterns expected in professional development.  

1.3. Functional Requirements (User Stories)

The API must support the following user stories:

    As a librarian, I can add a new book to the library.

    As a librarian, I can view a list of all books or a single book by its ID.

    As a librarian, I can register a new member.

    As a librarian, I can see a list of all members.

    As a member, I can borrow an available book.

    As a member, I can return a borrowed book.

    As a librarian, I can view the borrowing history for a specific book.

1.4. Technical & Non-Functional Requirements

    Framework: ASP.NET Core 8 Web API.

    Database: Entity Framework Core with the In-Memory Database provider for a self-contained development experience.   

API Style: RESTful, adhering to standard conventions for endpoints, HTTP methods, and status codes.  

Security: All API endpoints must be secured using a custom Basic Authentication handler, demonstrating an understanding of the ASP.NET Core authentication pipeline.  

Logging: Structured logging must be implemented using Serilog to produce machine-readable log events.  

Testing: Controller logic must be unit-tested using the xUnit framework and the Moq library for mocking dependencies.  

Code Quality: The solution must adhere to Microsoft's C# Coding Conventions and demonstrate an application of SOLID principles, particularly the Single Responsibility and Dependency Inversion principles.  

Part 2: A Compendium of Backend Best Practices

This section serves as the educational core of the challenge, providing a detailed manual for implementing the required features according to modern best practices. Each subsection synthesizes established patterns into a practical, actionable guide.

2.1. Architecting the Solution: Layers and Conventions

A well-organized project structure is the first step toward a maintainable application. It separates concerns and makes the codebase intuitive to navigate. For this project, a clean, layered architecture will be used.  

Project Structure

The solution will be organized as follows:

    LibraryApi.sln (Solution File)

    LibraryApi/ (The ASP.NET Core Web API Project)

        Controllers/: Contains the API controllers that handle HTTP requests.

        Models/: Contains Data Transfer Objects (DTOs) used for API requests and responses. This abstracts the internal data entities from the public API contract.   

        Data/: Contains the DbContext class and the data entity classes (Book, Member, BorrowingRecord).

        Services/: Contains business logic interfaces (e.g., IBookService) and their concrete implementations (BookService).

        Authentication/: Contains the custom BasicAuthenticationHandler.

        Middleware/: Contains custom middleware, such as the global exception handler.

    LibraryApi.Tests/ (The xUnit Test Project)

        Contains unit tests for the application logic, primarily the controllers.

Coding Conventions and Naming

Adherence to consistent coding conventions is non-negotiable in a professional environment. It enhances readability, reduces cognitive load, and makes code maintenance easier for the entire team. This project will strictly follow the Microsoft C# coding conventions. Key conventions include:  

    Casing: PascalCase for class names, method names, and properties. camelCase for local variables and method parameters.   

Data Types: Use language keywords for data types (e.g., int instead of System.Int32, string instead of System.String).  

Brace Style: Use the "Allman" style, where open and closing braces get their own line and are aligned with the current indentation level.  

Meaningful Names: As software development involves more reading than writing code, names should be descriptive and self-documenting. A method named  

    GetUserByIdAsync is clear and unambiguous, whereas a generic name like ProcessData obscures its purpose. Meaningful names will be emphasized for all variables, methods, classes, and projects.

2.2. Data Persistence with EF Core In-Memory

For this self-contained challenge, Entity Framework (EF) Core will be used with its in-memory database provider. This eliminates the need for an external database setup, allowing focus on the application logic.  

Setting up the DbContext

An ApplicationDbContext class will be created, inheriting from Microsoft.EntityFrameworkCore.DbContext. This class acts as the bridge between the domain models and the database. It will contain DbSet<T> properties for each entity:
C#

// In LibraryApi/Data/ApplicationDbContext.cs
using Microsoft.EntityFrameworkCore;
using LibraryApi.Data.Models; // Assuming entities are in a sub-namespace

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public DbSet<Book> Books { get; set; }
    public DbSet<Member> Members { get; set; }
    public DbSet<BorrowingRecord> BorrowingRecords { get; set; }
}

 

Configuring the In-Memory Provider

The DbContext and the in-memory provider are registered in the dependency injection container in Program.cs:
C#

// In Program.cs
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseInMemoryDatabase("LibraryDb"));

 

    Warning: Limitations of the In-Memory Database Provider
    The EF Core in-memory database provider is a valuable tool for quick prototyping and certain types of testing. However, it is explicitly not recommended for production use and is discouraged even for comprehensive testing. It is crucial to understand its limitations:   

    It is not a relational database. It does not enforce relational constraints, such as foreign key integrity.

    Transactions are not supported. Operations that rely on transactional atomicity will behave differently than against a real database.   

        It may have different default behaviors regarding case sensitivity in queries compared to a real SQL database.
        For this challenge, it is used to ensure the project is self-contained and easy to start. In a real-world application, this provider would be replaced with a production-grade one, such as Microsoft.EntityFrameworkCore.SqlServer or Npgsql.EntityFrameworkCore.PostgreSQL, and development would proceed against a real database instance (e.g., in a Docker container).

Seeding Initial Data

To make the API immediately usable and testable, the database can be seeded with initial data at application startup. This can be done in Program.cs after the WebApplication is built but before it is run.
C#

// In Program.cs, after `var app = builder.Build();`

using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<ApplicationDbContext>();
    
    // Ensure the database is created
    context.Database.EnsureCreated();

    // Seed data if the database is empty
    if (!context.Books.Any())
    {
        context.Books.AddRange(
            new Book { Id = 1, Title = "The Great Gatsby", Author = "F. Scott Fitzgerald", ISBN = "9780743273565", Status = BookStatus.Available },
            new Book { Id = 2, Title = "To Kill a Mockingbird", Author = "Harper Lee", ISBN = "9780061120084", Status = BookStatus.Available }
        );
        context.Members.Add(new Member { Id = 1, Name = "John Doe" });
        context.SaveChanges();
    }
}

 

2.3. Designing the RESTful Interface

A well-designed REST API is intuitive, predictable, and consistent. It acts as a stable contract between the server and its clients. This project will adhere to established REST conventions.  

    Use Nouns, Not Verbs: Resources are the "nouns" of the API. Endpoints should represent these resources, such as /books and /members. The action to be performed is indicated by the HTTP method (e.g., GET, POST), making endpoint names like /getBooks redundant and incorrect.   

Use Plural Nouns for Collections: A URI that references a collection of resources should use a plural noun (e.g., /books). A specific item within that collection is accessed via its unique identifier (e.g., GET /books/{id}).  

Map HTTP Methods to CRUD Operations: The standard HTTP methods map directly to Create, Read, Update, and Delete (CRUD) operations :  

    POST: Creates a new resource.

    GET: Retrieves one or more resources.

    PUT: Replaces an existing resource entirely (idempotent).

    PATCH: Partially updates an existing resource.

    DELETE: Removes a resource.

Use Logical Nesting for Relationships: To model actions or sub-resources, logical nesting can be used. For example, the action of borrowing a book is tied to a specific book. An endpoint like POST /books/{bookId}/borrow is intuitive and clearly expresses this relationship. While a purist REST approach might model this as creating a new "borrowing" resource at a top-level /borrowings endpoint, the nested action-oriented approach is often more pragmatic and easier for clients to understand.  

Use Standard HTTP Status Codes: Communicating the outcome of a request via standard status codes is fundamental to REST. This allows clients to handle responses programmatically without parsing the response body.  

        Success: 200 OK (for successful GET), 201 Created (for successful POST, should include a Location header pointing to the new resource), 204 No Content (for successful operations that don't return a body, like DELETE or some POST/PUT actions).

        Client Errors: 400 Bad Request (invalid syntax or validation failure), 401 Unauthorized (authentication required), 403 Forbidden (authenticated but not permitted), 404 Not Found (resource does not exist).

        Server Errors: 500 Internal Server Error (for unexpected, unhandled exceptions).

API Specification Table

A detailed API specification serves as the blueprint for development. It ensures consistency, defines the contract for API consumers, and acts as a checklist during implementation and testing. Before writing any controller code, the entire request/response cycle for each endpoint should be clearly defined.

Table 1: REST API Endpoint Specification
Feature	HTTP Method	URI	Description	Request Body	Success Response	Error Responses
Add Book	POST	/api/v1/books	Adds a new book to the library.	CreateBookDto	201 Created with Location header, returns BookDto	400 Bad Request, 401 Unauthorized
Get All Books	GET	/api/v1/books	Retrieves all books.	(none)	200 OK with IEnumerable<BookDto>	401 Unauthorized
Get Book by ID	GET	/api/v1/books/{id}	Retrieves a single book by its ID.	(none)	200 OK with BookDto	401 Unauthorized, 404 Not Found
Borrow Book	POST	/api/v1/books/{bookId}/borrow	A member borrows a book.	BorrowRequestDto (MemberId)	204 No Content	400 Bad Request (e.g., book unavailable), 401 Unauthorized, 404 Not Found (book or member)
Return Book	POST	/api/v1/books/{bookId}/return	A member returns a book.	(none)	204 No Content	400 Bad Request (e.g., book not borrowed), 401 Unauthorized, 404 Not Found
Add Member	POST	/api/v1/members	Registers a new library member.	CreateMemberDto	201 Created with Location header, returns MemberDto	400 Bad Request, 401 Unauthorized
Get All Members	GET	/api/v1/members	Retrieves all members.	(none)	200 OK with IEnumerable<MemberDto>	401 Unauthorized

2.4. Mastering Dependency Injection in ASP.NET Core

Dependency Injection (DI) is a design pattern central to building modern, loosely coupled, and testable applications in ASP.NET Core. It embodies the Dependency Inversion Principle, a cornerstone of SOLID design. Instead of a class creating its own dependencies (e.g.,  

var service = new BookService();), it declares them as dependencies (typically in its constructor), and an external container provides them.  

Service Lifetimes

When registering a service in the DI container, its lifetime must be specified. The choice of lifetime has significant implications for application behavior and resource management.  

    Singleton: A single instance of the service is created for the entire application lifetime. This is suitable for stateless services, configuration objects, or services that are expensive to create. Caution must be exercised to ensure thread safety and to avoid memory leaks.   

Scoped: A new instance is created once per client request (or scope). This is the default lifetime for DbContext and is ideal for any service that needs to maintain state within a single request-response cycle. All components within the same request will share the same instance of a scoped service.  

Transient: A new instance is created every time the service is requested from the container. This is best for lightweight, stateless services where a new instance for every use is desired.  

Services will be registered in Program.cs by mapping an interface to its concrete implementation, for example: builder.Services.AddScoped<IBookService, BookService>();. Programming against interfaces is a key practice that facilitates DI and makes it possible to substitute implementations, which is essential for unit testing.  

The Captive Dependency Problem

A common and dangerous pitfall in DI is creating a "captive dependency." This occurs when a service with a longer lifetime (e.g., a singleton) depends on a service with a shorter lifetime (e.g., scoped).  

Consider a singleton service that injects a scoped DbContext in its constructor. The singleton is created once and lives for the duration of the application. The DbContext instance it receives during its creation is "captured" and will also live for the entire application lifetime. Subsequent HTTP requests that use this singleton service will be reusing this same, stale DbContext instance instead of receiving a fresh, request-scoped one. This leads to data from one request leaking into another and causes bugs that are notoriously difficult to diagnose.

Fortunately, the default ASP.NET Core DI container helps prevent this by throwing an exception at application startup if it detects a singleton attempting to inject a scoped service. Understanding the underlying reason for this validation is a mark of a proficient backend developer.  

2.5. The Asynchronous Imperative: async/await

In a web server environment, thread management is critical for scalability. Asynchronous programming with async and await is the primary mechanism in.NET for handling I/O-bound operations (like database queries, file access, or calls to external APIs) efficiently.  

When a thread encounters an await on an I/O operation, instead of blocking and waiting for the operation to complete, it is released back to the thread pool. It can then be used to serve other incoming requests. Once the I/O operation finishes, a thread from the pool is used to resume execution of the method from where it left off. This non-blocking model allows a server to handle a much higher number of concurrent requests with fewer threads, dramatically improving scalability.  

Best Practices for Asynchronous Code

    Async All the Way: If a method performs an asynchronous operation, it should be marked async and return a Task or Task<T>. Any method that calls this async method should, in turn, also be async and await the call. This practice propagates the asynchrony up the call stack, ensuring the entire chain is non-blocking.   

Avoid async void: Methods returning void cannot be awaited, which means the caller has no way to know when the operation has completed. More critically, any unhandled exceptions thrown from an async void method will typically crash the application process. The only legitimate use case for async void is for event handlers, which have a void signature by contract.  

Use ConfigureAwait(false) in Libraries: In general-purpose libraries that are not tied to a specific UI or application model (like ASP.NET Core), it is a best practice to use ConfigureAwait(false) on awaited tasks. This tells the runtime that the continuation of the method does not need to be executed on the original synchronization context, which can improve performance and help prevent deadlocks in certain application types. While modern ASP.NET Core applications do not have a synchronization context, making this less critical, it remains a good habit for writing reusable library code.  

All data access methods within the BookService and the controller actions that invoke them will be implemented asynchronously. For example: public async Task<BookDto> GetBookByIdAsync(int id).

2.6. Strategies for Robustness: Validation and Error Handling

A robust API must gracefully handle both invalid input and unexpected internal failures. A two-pronged strategy of proactive validation and centralized exception handling will be employed.

2.6.1. Proactive Input Validation with Data Annotations

Invalid data should be caught as early as possible. ASP.NET Core provides a powerful and declarative way to handle input validation using data annotation attributes on request models (DTOs).  

Request DTOs, such as CreateBookDto, will be decorated with attributes from the System.ComponentModel.DataAnnotations namespace to enforce business rules.  

    ``: Ensures a property is not null or empty.

    ``: Constrains the length of a string.

    ``: Validates a string against a specific pattern, useful for formats like ISBN.

Example CreateBookDto:
C#

public class CreateBookDto
{
   
   
    public string Title { get; set; }

   
   
    public string Author { get; set; }

   
   +$", ErrorMessage = "Invalid ISBN format.")]
    public string ISBN { get; set; }
}

When controllers are decorated with the [ApiController] attribute, the framework automatically enables model validation. If an incoming request fails validation, ASP.NET Core will short-circuit the request and automatically return an HTTP 400 Bad Request response. The body of this response will be a ValidationProblemDetails object, which contains a structured list of all the validation errors. This behavior significantly cleans up controller actions, as they no longer need explicit if (!ModelState.IsValid) checks.  

2.6.2. Centralized Exception Management with Middleware

While validation handles expected client errors, the API must also manage unexpected errors gracefully. These can range from predictable business rule violations (e.g., trying to borrow an unavailable book) to true system exceptions (e.g., a database connection failure).

A global exception handling middleware is the ideal pattern for this. It provides a single place to catch all unhandled exceptions that bubble up the call stack, ensuring that no raw exception details are ever leaked to the client and that all errors are transformed into a consistent, machine-readable format.  

This strategy distinguishes between different types of errors:

    Validation Failures: These are expected client-side errors and are handled automatically by the [ApiController] attribute, resulting in a 400 Bad Request.

    Business Rule Violations: These are predictable application-level errors. They are best handled by throwing specific, custom exceptions from the service layer (e.g., throw new BookUnavailableException("The book is already borrowed.")).

    Unexpected System Failures: These are true exceptional events, such as a NullReferenceException or a database timeout.

The global exception handler will catch all of these unhandled exceptions and map them to an appropriate HTTP response based on the exception type. The response body will always conform to the RFC 7807 ProblemDetails standard, providing a consistent error contract for all API clients.  

The implementation will involve:

    Creating a GlobalExceptionHandlerMiddleware class.

    Placing a try-catch block around the call to the next middleware in the pipeline (await _next(context);).

    Writing catch blocks for specific custom exceptions (e.g., catch (ResourceNotFoundException ex)) and mapping them to the correct status code (e.g., 404 Not Found).

    Including a final catch (Exception ex) block to handle all other unexpected errors, logging them, and returning a generic 500 Internal Server Error response to the client without leaking sensitive details.   

2.7. Securing the API: A Basic Authentication Deep Dive

Every API endpoint must be secured to prevent unauthorized access. While modern APIs often use token-based schemes like OAuth 2.0 and JWT, Basic Authentication is a simple, stateless protocol built into HTTP that is perfect for this self-contained challenge. Implementing it from scratch provides a deep understanding of the ASP.NET Core authentication and authorization pipeline.  

The implementation will follow these steps, creating a custom authentication handler :  

    Create BasicAuthenticationHandler: A new class will be created that inherits from AuthenticationHandler<AuthenticationSchemeOptions>.

    Override HandleAuthenticateAsync: This is the core method where the authentication logic resides.

    Parse the Header: The code will retrieve the Authorization header from the incoming HTTP request. If the header is missing or doesn't start with "Basic ", the request is unauthenticated.

    Decode Credentials: The Base64-encoded string following "Basic " will be extracted and decoded to reveal the username:password text.

    Validate Credentials: The extracted username and password will be validated. For this challenge, a simple check against hardcoded values is sufficient (e.g., user "admin", password "password"). In a real application, this would involve querying a user database.

    Create Claims Principal: If the credentials are valid, a ClaimsPrincipal object is constructed. This object represents the authenticated user's identity and can hold claims (pieces of information about the user, like their ID or roles).

    Return Result: The handler returns AuthenticateResult.Success(ticket) if authentication succeeds, or AuthenticateResult.Fail("reason") if it fails.

    Register the Handler: In Program.cs, the new authentication scheme and its handler are registered with the DI container: builder.Services.AddAuthentication("Basic").AddScheme<AuthenticationSchemeOptions, BasicAuthenticationHandler>("Basic", null);.

    Enable Middleware: The authentication and authorization middleware are added to the request pipeline in Program.cs by calling app.UseAuthentication(); and app.UseAuthorization();. The order is important; authentication must happen before authorization.

    Secure Endpoints: Finally, controllers or specific action methods are decorated with the [Authorize] attribute to enforce the authentication requirement.

2.8. Observability: Structured Logging with Serilog

Effective logging is essential for debugging, monitoring, and understanding application behavior. Plain text logs are difficult to parse and query. Structured logging, however, captures log events as key-value pairs (typically in JSON format), making them machine-readable and easy to filter and analyze in log management systems like Seq, Splunk, or the ELK stack. Serilog is the de facto standard for structured logging in the.NET ecosystem.  

Setup and Configuration

The integration of Serilog involves a few key steps :  

    Install Packages: The necessary NuGet packages, Serilog.AspNetCore and sinks like Serilog.Sinks.Console and Serilog.Sinks.File, are installed.

    Configure in Program.cs: The best practice is to configure the static Log.Logger at the very beginning of Program.cs, before the WebApplication.CreateBuilder call. This ensures that any errors during application startup can be captured by Serilog. The entire application execution is wrapped in a try-catch-finally block to log fatal startup errors and ensure logs are flushed on exit.

    Integrate with ASP.NET Core Logging: The builder.Host.UseSerilog() extension method is called to replace the built-in logging providers with Serilog. This allows the application to continue using the standard ILogger<T> interface, while Serilog handles the processing and output of log events.

    Configure via appsettings.json: While Serilog can be configured fluently in code, it is more flexible to read the configuration from appsettings.json. This allows log levels and sink configurations to be changed without recompiling the application.

    Enable Request Logging: The app.UseSerilogRequestLogging() middleware is added to the pipeline to automatically log every incoming HTTP request with useful information like the request path, method, status code, and duration.

Usage

Once configured, ILogger<T> is injected into controllers and services via DI. Log messages should use message templates with named placeholders to capture structured data:
C#

_logger.LogInformation("Processing request to borrow book {BookId} for member {MemberId}", bookId, memberId);

In the resulting JSON log, BookId and MemberId will be captured as distinct, queryable properties, not just as part of a flat text string.

2.9. Ensuring Correctness: Unit Testing with xUnit and Moq

Unit tests are a critical practice for ensuring code quality and correctness. They verify that individual components ("units") of an application work as expected in isolation from their dependencies. For this challenge, the focus will be on unit testing the logic within the API controllers.  

The Tools and the Pattern

    xUnit: A modern and popular testing framework for.NET. Tests are written as methods decorated with attributes like [Fact] (for a single test case) or (for a suite of tests with different inputs provided by).   

Moq: A powerful and intuitive mocking library. It is used to create "mock" or "fake" objects that simulate the behavior of a unit's dependencies. For example, when testing a controller, a mock of the IBookService will be created to control what data it returns, without ever touching the real service or database.  

Arrange-Act-Assert (AAA) Pattern: All unit tests should follow this clear and consistent structure :  

        Arrange: All setup for the test is performed here. This includes creating mock dependencies, configuring their behavior using mock.Setup(...), and instantiating the class under test (the controller) with the mocks.

        Act: The specific method on the class under test is invoked.

        Assert: The outcome of the Act phase is verified. This involves checking the type of the returned ActionResult, the HTTP status code, and the content of the response body.

What to Test

When unit testing a controller, the goal is to test the controller's decision-making logic, not its dependencies. Key scenarios to test include:  

    The "Happy Path": When a dependency provides valid data, does the controller return the expected success response (e.g., an OkObjectResult with the correct data)?

    The "Sad Path": When a dependency indicates a failure (e.g., the service returns null because a book was not found), does the controller correctly translate this into the appropriate error response (e.g., a NotFoundResult)?

    Invalid Model State: To test how the controller behaves when model validation fails, the test can manually add an error to the controller's ModelState property and then verify that it returns a BadRequestObjectResult.   